# -*- coding: utf-8 -*-
"""
Generates all features.
"""

import cv2
import math
import numpy as np
import os
import pandas as pd
import shape_features
import utilities as utils
import sys


if utils.CV_V3 or utils.CV_V4:
    orb = cv2.ORB_create()
else:
    orb = cv2.ORB()
        
def orb_labels(orb_number=5):
    """
    Returns the labels (column names) generated by "orb_features".

    Parameters
    ----------
    orb_number : int
        Number of distances that ORB should return.

    Returns
    -------
    labels : array of strings
    """
    return [ "distance_%02d" % i for i in range(orb_number)] + ['distance_mean','distance_std', 'keypoint_count', 'keypoint_hull_area', 'full_keypoint_count']

def orb_features(cropped, full, cnt, orb_number=5):
    """
    Returns all features regarding ORB. Meaning:
    - Top-N-Distances
    - Mean of all distances
    - Standard deviation of all distances

    Parameters
    ----------
    img : opencv image
        The cropped portion of the image.

    orb_number : int
        Number of distances that ORB should return.

    Returns
    -------
    features: array
    """

    # Compute the descriptors with ORB
    kp = orb.detect(cropped, None)
    distances = []
    size = len(kp)
    
    if(size < orb_number):
        return False # Acho melhor remover, pois se não tem descritores, é um mau exemplo (pode ser fundo ou sla)
    
    for i in range(size):
        a = np.array(kp[i].pt)
        for j in range(i+1,size):
            b = np.array(kp[j].pt)
            distances.append(np.linalg.norm(a-b))

    mean = np.mean(distances)
    std = np.std(distances)
    distances.sort()
    top_distances = distances[:orb_number]
    
    points = np.array( [ [k.pt] for k in kp], dtype='float32')
    polygon_area = cv2.contourArea(cv2.convexHull(points))
    features = top_distances + [mean,std, size, polygon_area, get_number_of_full_keypoints(full, cnt)]
    
    return features

def get_labels(orb_number=5):
    """
    Returns the labels (column names) generated by "get".

    Parameters
    ----------
    orb_number : int
        Number of distances that ORB should return.

    Returns
    -------
    labels : array strings containing the all labels
    """
    return orb_labels(orb_number) + shape_features.get_labels()

def get_number_of_full_keypoints(full, cnt):
    full_kp = orb.detect(full, None)
    return sum([cv2.pointPolygonTest(cnt, k.pt, False) > -1 for k in full_kp])

def get(cropped, full, cnt, orb_number=5):
    """
    Calculates features regarding ORB as well as shape features.
    If ORB fails, returns False, indicating that the object lacks information.

    Parameters
    ----------
    cropped : opencv image
        The cropped portion of the image.

    full : opencv image
        The full original unprocessed image.

    cnt : opencv contour
        The contour of the cropped object, with respect to the coordenates of "full".

    orb_number : int
        Number of distances that ORB should return.

    Returns
    -------
    features : array of all features | False
    """
    orb = orb_features(cropped, full, cnt, orb_number)
    if(orb is False):
        return False
    sf = shape_features.get(full, cnt) #Calls the shape_features module
    return orb + sf
